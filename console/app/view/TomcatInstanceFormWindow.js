/*
 * File: app/view/TomcatInstanceFormWindow.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('webapp.view.TomcatInstanceFormWindow', {
    extend: 'Ext.window.Window',
    alias: 'widget.TomcatInstanceFormWindow',

    requires: [
        'Ext.form.Panel',
        'Ext.form.field.ComboBox',
        'Ext.XTemplate',
        'Ext.form.FieldSet',
        'Ext.button.Button',
        'Ext.form.Label',
        'Ext.form.field.Hidden',
        'Ext.toolbar.Toolbar',
        'Ext.form.field.Checkbox',
        'Ext.ProgressBar'
    ],

    height: 543,
    id: 'TomcatInstanceFormWindow',
    itemId: 'TomcatInstanceFormWindow',
    width: 450,
    autoScroll: true,
    layout: 'card',
    title: 'Tomcat Instance 등록 1/2',
    modal: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'form',
                    width: 150,
                    bodyPadding: 15,
                    fieldDefaults: {
                        msgTarget: 'side',
                        labelWidth: 120
                    },
                    items: [
                        {
                            xtype: 'combobox',
                            anchor: '100%',
                            fieldLabel: 'Template 선택',
                            name: 'template_id'
                        },
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            afterLabelTextTpl: [
                                '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                            ],
                            fieldLabel: 'Instance Name',
                            labelWidth: 120,
                            name: 'instanceName',
                            allowBlank: false,
                            vtype: 'template'
                        },
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            afterLabelTextTpl: [
                                '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                            ],
                            fieldLabel: 'IP Address',
                            labelWidth: 120,
                            name: 'ipAddr',
                            allowBlank: false,
                            emptyText: 'ex) 192.168.0.5',
                            vtype: 'template'
                        },
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            afterLabelTextTpl: [
                                '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                            ],
                            fieldLabel: 'CATALINA_HOME',
                            name: 'catalinaHome',
                            allowBlank: false,
                            emptyText: 'ex) /opt/tomcat'
                        },
                        {
                            xtype: 'fieldset',
                            title: 'Instance Environment',
                            items: [
                                {
                                    xtype: 'textfield',
                                    anchor: '100%',
                                    afterLabelTextTpl: [
                                        '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                                    ],
                                    fieldLabel: 'CATALINA_BASE',
                                    name: 'catalinaBase',
                                    allowBlank: false,
                                    emptyText: 'ex) /apps/instance01'
                                },
                                {
                                    xtype: 'textfield',
                                    anchor: '100%',
                                    afterLabelTextTpl: [
                                        '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                                    ],
                                    fieldLabel: 'Env Script',
                                    name: 'envScriptFile',
                                    value: '$CATALINA_BASE/env.sh',
                                    allowBlank: false
                                },
                                {
                                    xtype: 'textfield',
                                    anchor: '100%',
                                    afterLabelTextTpl: [
                                        '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                                    ],
                                    fieldLabel: 'Start Script',
                                    name: 'startScriptFile',
                                    value: '$CATALINA_BASE/start.sh',
                                    allowBlank: false
                                },
                                {
                                    xtype: 'textfield',
                                    anchor: '100%',
                                    afterLabelTextTpl: [
                                        '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                                    ],
                                    fieldLabel: 'Stop Script',
                                    name: 'stopScriptFile',
                                    value: '$CATALINA_BASE/stop.sh',
                                    allowBlank: false
                                }
                            ]
                        },
                        {
                            xtype: 'fieldset',
                            height: 169,
                            margin: '18 0 0 0',
                            collapsible: true,
                            title: 'SSH Settings (Required)',
                            items: [
                                {
                                    xtype: 'textfield',
                                    anchor: '100%',
                                    afterLabelTextTpl: [
                                        '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                                    ],
                                    fieldLabel: 'SSH Port',
                                    labelWidth: 130,
                                    name: 'sshPort',
                                    value: 22,
                                    allowBlank: false
                                },
                                {
                                    xtype: 'textfield',
                                    anchor: '100%',
                                    afterLabelTextTpl: [
                                        '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                                    ],
                                    fieldLabel: 'Username',
                                    labelWidth: 130,
                                    name: 'sshUsername',
                                    allowBlank: false
                                },
                                {
                                    xtype: 'textfield',
                                    validator: function(value) {
                                        //var chkValue = Ext.getCmp('editInstanceForm').getForm().findField('chkUseType').getValue();
                                        var chkValue = true;

                                        if(chkValue == true) {
                                            if(value) {
                                                return true;
                                            } else {
                                                return 'This field is required';
                                            }
                                        } else {
                                            return true;
                                        }

                                    },
                                    anchor: '100%',
                                    afterLabelTextTpl: [
                                        '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                                    ],
                                    fieldLabel: 'Password',
                                    labelWidth: 130,
                                    name: 'sshPassword',
                                    inputType: 'password',
                                    allowBlank: false
                                },
                                {
                                    xtype: 'textfield',
                                    validator: function(value) {
                                        //var chkValue = Ext.getCmp('editInstanceForm').getForm().findField('chkUseType').getValue();
                                        var chkValue = true;

                                        if(chkValue == true) {
                                            if(value) {
                                                return true;
                                            } else {
                                                return 'This field is required';
                                            }
                                        } else {
                                            return true;
                                        }

                                    },
                                    anchor: '100%',
                                    afterLabelTextTpl: [
                                        '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                                    ],
                                    fieldLabel: 'Password Confirm',
                                    labelWidth: 130,
                                    name: 'confirmSshPassword',
                                    inputType: 'password',
                                    allowBlank: false,
                                    vtype: 'password'
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        var formPanel = button.up("form");


                                        formPanel.getForm().submit({
                                            clientValidation: true,
                                            url: GlobalData.urlPrefix + "tomcat/sshtest",
                                            method: "POST",
                                            waitMsg: 'Server connecting...',
                                            success: function(form, action) {
                                                //Ext.Msg.alert('Success', action.result.msg);


                                                Ext.getCmp('sshTestResult').getEl().setStyle("color", "blue");
                                                Ext.getCmp('sshTestResult').setText("OK");
                                                button.setDisabled(true);

                                            },
                                            failure: function(form, action) {

                                                switch (action.failureType) {
                                                    case Ext.form.action.Action.CLIENT_INVALID:
                                                    Ext.Msg.alert('Failure', '유효하지 않은 입력값이 존재합니다.');
                                                    break;
                                                    case Ext.form.action.Action.CONNECT_FAILURE:
                                                    Ext.Msg.alert('Failure', 'Server communication failed');
                                                    break;
                                                    case Ext.form.action.Action.SERVER_INVALID:
                                                    if(action.result.msg){
                                                        Ext.Msg.alert('Failure', action.result.msg);
                                                    }else{
                                                        Ext.Msg.alert('Failure', "Server error.");
                                                    }

                                                }

                                                Ext.getCmp('sshTestResult').getEl().setStyle("color", "red");
                                                Ext.getCmp('sshTestResult').setText("Failed");
                                            }
                                        });
                                    },
                                    id: 'sshTestBtn',
                                    itemId: 'sshTestBtn',
                                    text: '접속 테스트'
                                },
                                {
                                    xtype: 'label',
                                    id: 'sshTestResult',
                                    itemId: 'sshTestResult',
                                    margin: '0 0 0 10',
                                    text: ''
                                }
                            ]
                        },
                        {
                            xtype: 'hiddenfield',
                            anchor: '100%',
                            fieldLabel: 'Label',
                            name: 'id'
                        }
                    ],
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'bottom',
                            ui: 'footer',
                            layout: {
                                type: 'hbox',
                                pack: 'center'
                            },
                            items: [
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {

                                        if(!Ext.getCmp('sshTestBtn').isDisabled()){
                                            Ext.Msg.alert('Alert', "ssh 접속테스트를 수행해주세요.");
                                            return;
                                        }



                                        var formPanel = button.up("form");


                                        formPanel.getForm().submit({
                                            clientValidation: true,
                                            url: GlobalData.urlPrefix + "tomcat/instance",
                                            method: "POST",
                                            waitMsg: 'Saving Data...',
                                            success: function(form, action) {
                                                //Ext.Msg.alert('Success', action.result.msg);

                                                webapp.app.getController('TomcatInstanceController').saveInstance(action.result.data);

                                                Ext.getCmp('tomcatInstGrid').getStore().load();
                                                //formPanel.up('window').close();
                                                formPanel.up('window').setTitle("Tomcat Instance 등록 2/2");
                                                formPanel.up('window').layout.setActiveItem(1);
                                            },
                                            failure: function(form, action) {

                                                switch (action.failureType) {
                                                    case Ext.form.action.Action.CLIENT_INVALID:
                                                    Ext.Msg.alert('Failure', '유효하지 않은 입력값이 존재합니다.');
                                                    break;
                                                    case Ext.form.action.Action.CONNECT_FAILURE:
                                                    Ext.Msg.alert('Failure', 'Server communication failed');
                                                    break;
                                                    case Ext.form.action.Action.SERVER_INVALID:
                                                    if(action.result.msg){
                                                        Ext.Msg.alert('Failure', action.result.msg);
                                                    }else{
                                                        Ext.Msg.alert('Failure', "Server error.");
                                                    }

                                                }
                                            }
                                        });

                                    },
                                    margin: '0 10 0 0',
                                    padding: '2 5 2 5',
                                    text: 'OK'
                                },
                                {
                                    xtype: 'button',
                                    margin: '0 10 0 0',
                                    padding: '2 5 2 5',
                                    text: 'Template 등록'
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        Ext.MessageBox.confirm('Confirm', '작업을 취소하시겠습니까?', function(btn){

                                            if(btn == "yes"){
                                                button.up("window").close();
                                            }

                                        });

                                    },
                                    margin: '0 0 0 0',
                                    padding: '2 5 2 5',
                                    text: 'Cancel'
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'panel',
                    id: 'TomcatInstanceLoadgingPanel',
                    itemId: 'TomcatInstanceLoadgingPanel',
                    header: false,
                    title: 'My Panel',
                    layout: {
                        type: 'vbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'panel',
                            flex: 1,
                            margin: '10 10 10 40',
                            padding: '',
                            header: false,
                            title: 'NothPanel',
                            layout: {
                                type: 'vbox',
                                align: 'stretch',
                                padding: 10
                            },
                            items: [
                                {
                                    xtype: 'label',
                                    id: 'loadingInstanceName',
                                    itemId: 'loadingInstanceName',
                                    text: 'Instance Name :'
                                },
                                {
                                    xtype: 'label',
                                    id: 'loadingIpAddr',
                                    itemId: 'loadingIpAddr',
                                    text: 'IP Adress :'
                                },
                                {
                                    xtype: 'label',
                                    id: 'loadingCatalinaHome',
                                    itemId: 'loadingCatalinaHome',
                                    text: 'CATALINA_HOME :'
                                },
                                {
                                    xtype: 'label',
                                    id: 'loadingCatalinaBase',
                                    itemId: 'loadingCatalinaBase',
                                    text: 'CATALINA_BASE :'
                                },
                                {
                                    xtype: 'label',
                                    margin: '10 0 10 0',
                                    text: '  '
                                },
                                {
                                    xtype: 'label',
                                    id: 'loadingStatus',
                                    itemId: 'loadingStatus',
                                    text: '등록중입니다. 잠시만 기다려주세요.'
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            flex: 1,
                            height: 150,
                            margin: '0 30 0 30',
                            header: false,
                            title: 'SouthPanel',
                            items: [
                                {
                                    xtype: 'checkboxfield',
                                    id: 'envshCheckbox',
                                    itemId: 'envshCheckbox',
                                    fieldLabel: 'Label',
                                    hideLabel: true,
                                    boxLabel: 'env.sh 로딩중...'
                                },
                                {
                                    xtype: 'checkboxfield',
                                    id: 'serverxmlCheckbox',
                                    itemId: 'serverxmlCheckbox',
                                    fieldLabel: 'Label',
                                    hideLabel: true,
                                    boxLabel: 'server.xml 로딩.'
                                },
                                {
                                    xtype: 'checkboxfield',
                                    id: 'contextxmlCheckbox',
                                    itemId: 'contextxmlCheckbox',
                                    fieldLabel: 'Label',
                                    hideLabel: true,
                                    boxLabel: 'context.xml 로딩.'
                                },
                                {
                                    xtype: 'progressbar',
                                    border: 1,
                                    id: 'tomcatProgressBar',
                                    text: ''
                                }
                            ]
                        }
                    ],
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            flex: 1,
                            dock: 'bottom',
                            ui: 'footer',
                            layout: {
                                type: 'hbox',
                                pack: 'center'
                            },
                            items: [
                                {
                                    xtype: 'button',
                                    disabled: true,
                                    text: '뒤로'
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        button.up("window").close();
                                    },
                                    text: 'Close'
                                }
                            ]
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    }

});