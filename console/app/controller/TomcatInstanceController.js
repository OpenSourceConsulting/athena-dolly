/*
 * File: app/controller/TomcatInstanceController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('webapp.controller.TomcatInstanceController', {
    extend: 'Ext.app.Controller',

    onMenuitemClick: function(item, e, eOpts) {
        alert(item.getId());
    },

    onPanelActivate: function(component, eOpts) {
        Ext.getCmp("loadingInstanceName").setText("Instance Name : "+ this.getInstanceField("instanceName"));
        Ext.getCmp("loadingIpAddr").setText("IP Adress : "+ this.getInstanceField("ipAddr"));
        Ext.getCmp("loadingCatalinaHome").setText("CATALINA_HOME : "+ this.getInstanceField("catalinaHome"));
        Ext.getCmp("loadingCatalinaBase").setText("CATALINA_BASE : "+ this.getInstanceField("catalinaBase"));

        this.checkServerStatus(this.getInstanceField("id"));


    },

    saveInstance: function(instance) {
        this.instance = instance;
    },

    getInstanceField: function(fieldName) {
        return this.instance[fieldName];
    },

    checkServerStatus: function(instId) {
        var me = this;

        Ext.Ajax.request({
                url: GlobalData.urlPrefix + "tomcat/instance/"+instId,
                method: "GET",
                success: function(resp, ops) {

                    var instance = Ext.decode(resp.responseText);
                    me.setLoadingMessage(instance.state);

                    if(instance.state < 100 && instance.state % 10 === 0){
                        setTimeout(function(){ me.checkServerStatus(instId);}, 1000);
                    }
                    // state == 100 or 에러발생.
                }
        });
    },

    setLoadingMessage: function(state) {

        var envshCheckbox = Ext.getCmp("envshCheckbox");
        var serverxmlCheckbox = Ext.getCmp("serverxmlCheckbox");
        var contextxmlCheckbox = Ext.getCmp("contextxmlCheckbox");
        var progressBar = Ext.getCmp("tomcatProgressBar");


        switch(state) {
            case 10:
                progressBar.updateProgress(0.25);
                break;
            case 20:
                progressBar.updateProgress(0.5);
                break;
            case 30:
                progressBar.updateProgress(0.75);
                break;
            case 100:
                progressBar.updateProgress(1);
                break;
        }


        switch(state) {
            case 100:
                Ext.getCmp("loadingStatus").setText("등록 완료.");
            case 30:
                if(contextxmlCheckbox.getValue() == false){
                    contextxmlCheckbox.setValue(true);
                    contextxmlCheckbox.setBoxLabel("context.xml 파일 로딩 완료.");
                }
            case 20:
                if(serverxmlCheckbox.getValue() == false){
                    serverxmlCheckbox.setValue(true);
                    serverxmlCheckbox.setBoxLabel("server.xml 파일 로딩 완료.");
                    if(contextxmlCheckbox.getValue() == false){
                        contextxmlCheckbox.setBoxLabel("context.xml 파일 로딩중...");
                    }
                }
            case 10:
                if(envshCheckbox.getValue() == false){
                    envshCheckbox.setValue(true);
                    envshCheckbox.setBoxLabel("env.sh 파일 로딩 완료.");
                    if(serverxmlCheckbox.getValue() == false){
                        serverxmlCheckbox.setBoxLabel("server.xml 파일 로딩중...");
                    }
                }
                break;
            case 0:
                envshCheckbox.setBoxLabel("env.sh 파일 로딩중...");
                break;
        }
    },

    init: function(application) {
        this.control({
            "#InstActionMenu menuitem": {
                click: this.onMenuitemClick
            },
            "#TomcatInstanceLoadgingPanel": {
                activate: this.onPanelActivate
            }
        });
    }

});
