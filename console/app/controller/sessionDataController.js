/*
 * File: app/controller/sessionDataController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('webapp.controller.sessionDataController', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            ref: 'centerContainer',
            selector: '#centerContainer'
        },
        {
            ref: 'detailPanel',
            selector: '#detailPanel'
        },
        {
            ref: 'dashboardBtn',
            selector: '#dashboardBtn'
        },
        {
            ref: 'sessionDataBtn',
            selector: '#sessionDataBtn'
        },
        {
            ref: 'viewListBtn',
            selector: '#viewListBtn'
        },
        {
            ref: 'sessionDataGrid',
            selector: '#sessionDataGrid'
        },
        {
            ref: 'sessionDataField',
            selector: '#sessionDataField'
        }
    ],

    onSessionDataBtnClick: function(button, e, eOpts) {
        /**
         * Session Data List 메뉴 버튼 클릭 시 수행되는 function
         */
        var centerContainer = this.getCenterContainer(),
            dashboardBtn = this.getDashboardBtn(),
            sessionDataBtn = this.getSessionDataBtn(),
            viewListBtn = this.getViewListBtn();

        // 현재 선택된 item이 sessionDataPanel일 경우 무시한다.
        if (centerContainer.layout.getActiveItem().itemId === "sessionDataPanel") {
            sessionDataBtn.toggle(true);
            return;
        }

        dashboardBtn.toggle(false);
        viewListBtn.toggle(false);
        centerContainer.layout.setActiveItem(1);

        var me = this;
        me.loadSessionList();
    },

    onSessionDataSelect: function(rowmodel, record, index, eOpts) {
        /**
         * Session Data List에서 특정 세션 선택 시 해당 세션의 내용을 조회하고 Detail Panel에 보여주기 위한 function
         */
        var detailPanel = this.getDetailPanel();
        var sessionDataField = this.getSessionDataField();

        detailPanel.setLoading(true);


        // JSON Pretty Format으로 세션 상세 내용을 보여주기 위해 설정
        if (!library) {
           var library = {};
        }

        library.json = {
           replacer: function(match, pIndent, pKey, pVal, pEnd) {
              var key = '<span class=json-key>';
              var val = '<span class=json-value>';
              var str = '<span class=json-string>';
              var r = pIndent || '';
              if (pKey)
                 r = r + key + pKey.replace(/[": ]/g, '') + '</span>: ';
              if (pVal)
                 r = r + (pVal[0] == '"' ? str : val) + pVal + '</span>';
              return r + (pEnd || '');
           },
           prettyPrint: function(obj) {
              var jsonLine = /^( *)("[\w]+": )?("[^"]*"|[\w.+-]*)?([,[{])?$/mg;
              return JSON.stringify(obj, null, 5)
                 .replace(/&/g, '&amp;').replace(/\\"/g, '&quot;')
                 .replace(/</g, '&lt;').replace(/>/g, '&gt;')
                 .replace(jsonLine, library.json.replacer);
           }
        };


        Ext.Ajax.request({
            url: GlobalData.urlPrefix + 'getSessionData?key=' + record.get('key'),
            params: {
            },
            success: function(response, opts){
                detailPanel.setLoading(false);

                if (detailPanel.collapsed !== false) {
                    detailPanel.toggleCollapse();
                }

                var result = "<h2>" + response.responseText + "</h2>";
                sessionDataField.setValue("<pre>" + library.json.prettyPrint(Ext.decode(response.responseText)) + "</pre>");
            },
            failure: function(response, opts) {
                detailPanel.setLoading(false);
                sessionDataField.setValue(null);
                Ext.Msg.alert('Error', 'Server-side failure with status code ' + response.status);
            }
        });

    },

    onRefreshToolClick: function(tool, e, eOpts) {
        /**
         * Session Data List를 refresh 하기 위해 panel의 refresh tool을 활성화
         */
        var me = this;
        me.loadSessionList();
    },

    loadSessionList: function() {
        /**
         * Session Data List를 refresh 하기 위한 function
         */
        var sessionDataGrid = this.getSessionDataGrid(),
            detailPanel = this.getDetailPanel(),
            treePanel1 = Ext.getCmp('viewTreePanel1'),
            treeView1 = Ext.getCmp('viewTreeView1');

        if (detailPanel.collapsed === false) {
            detailPanel.toggleCollapse();
        }

        sessionDataGrid.setLoading(true);

        if (GlobalData.cacheType === 'couchbase') {
            this.getController("viewListController").getDdocs();
        }

        /*
        else if (GlobalData.cacheType === '') {
            if (designDocCombo.menu === null) {
                console.log("Empty!!!!!!");


                Ext.Ajax.request({
                    url: GlobalData.urlPrefix + 'ddocs',
                    async: false,
                    params: {
                    },
                    success: function(response, opts) {
                        var obj = Ext.decode(response.responseText);

                        // *
                        var menu = Ext.create('Ext.menu.Menu', {
                            id: 'viewMenu',
                            width: 120,
                            items: [
                                {
                                    xtype: 'menuitem',
                                    text: 'Menu Item1',
                                    menu: {
                                        xtype: 'menu',
                                        width: 120,
                                        items: [
                                            {
                                                xtype: 'menuitem',
                                                text: 'Menu Item11'
                                            },
                                            {
                                                xtype: 'menuitem',
                                                text: 'Menu Item12'
                                            },
                                            {
                                                xtype: 'menuitem',
                                                text: 'Menu Item13'
                                            }
                                        ]
                                    }
                                },
                                {
                                    xtype: 'menuseparator'
                                },
                                {
                                    xtype: 'menuitem',
                                    text: 'Menu Item2',
                                    menu: {
                                        xtype: 'menu',
                                        width: 120,
                                        items: [
                                            {
                                                xtype: 'menuitem',
                                                text: 'Menu Item21'
                                            },
                                            {
                                                xtype: 'menuitem',
                                                text: 'Menu Item22'
                                            },
                                            {
                                                xtype: 'menuitem',
                                                text: 'Menu Item23'
                                            }
                                        ]
                                    }
                                },
                                {
                                    xtype: 'menuseparator'
                                },
                                {
                                    xtype: 'menuitem',
                                    text: 'Menu Item3',
                                    menu: {
                                        xtype: 'menu',
                                        width: 120,
                                        items: [
                                            {
                                                xtype: 'menuitem',
                                                text: 'Menu Item31'
                                            },
                                            {
                                                xtype: 'menuitem',
                                                text: 'Menu Item32'
                                            },
                                            {
                                                xtype: 'menuitem',
                                                text: 'Menu Item33'
                                            }
                                        ]
                                    }
                                }
                            ]
                        });
                        / *
                        var menu = Ext.create('Ext.menu.Menu', {
                            //id: 'viewMenu2',
                            width: 120
                        });

                        var items = menu.items, item = null;
                        var subMenu = null, subItems = null, subItem = null;
                        var viewCnt = 0;
                        for (var i = 0; i < obj.length; i++) {
                            var doc = obj[i];

                            if (i > 0) {
                                separator = Ext.create('Ext.menu.Separator', {});
                                //items.add("couchbase-view-separator-" + i, Ext.create('Ext.menu.Separator', {}));
                                items.add(separator.id, separator);
                            }

                            item = Ext.create('Ext.menu.Item', {
                                xtype: 'menuitem',
                                text: doc.designDocumentName
                            });

                            subMenu = Ext.create('Ext.menu.Menu', {width: 120});
                            subItems = subMenu.items;
                            for (var j = 0; j < doc.viewList.length; j++) {
                                subItem = Ext.create('Ext.menu.Item', {
                                    xtype: 'menuitem',
                                    text: doc.viewList[j].viewName
                                });
                                //subItems.add("couchbase-view" + viewCnt++, subItem);
                                subItems.add(subItem.id, subItem);
                            }
                            //subMenu.items = subItems;
                            subMenu.add(subItems);

                            item.setMenu(subMenu, true);
                            //items.add("couchbase-design-doc-" + i, item);
                            items.add(item.id, item);
                            //items[i].menu.xtype = 'menu';
                            //items[i].menu.items = subItems;
                        }

                        //console.log(items);
                        //menu.items = items;
                        menu.add(items);
                        // * /
                        console.log(menu);

                        designDocCombo.menu = menu;
                    }
                });

            }

            console.log(designDocCombo);
        }
        */

        var url = GlobalData.urlPrefix + 'getSessionKeyList';
        if (treePanel1.selModel.lastSelected && treePanel1.selModel.lastSelected.data.leaf) {
            url = GlobalData.urlPrefix + 'getSessionKeyList?viewName=' + treePanel1.selModel.lastSelected.data.id;

            treeView1.focusNode(treePanel1.selModel.lastSelected);
        }

        Ext.Ajax.request({
            url: url,
            params: {
            },
            success: function(response, opts) {
                sessionDataGrid.setLoading(false);
                var obj = Ext.decode(response.responseText);
                var store = Ext.data.StoreManager.lookup('sessionDataStore');
                store.loadData(obj);
                sessionDataGrid.update();
            },
            failure: function(response, opts) {
                sessionDataGrid.setLoading(false);
                Ext.Msg.alert('Error', 'Server-side failure with status code ' + response.status);
            }
        });
    },

    init: function(application) {
        this.control({
            "#sessionDataBtn": {
                click: this.onSessionDataBtnClick
            },
            "#sessionDataGrid": {
                select: this.onSessionDataSelect
            },
            "#refreshTool": {
                click: this.onRefreshToolClick
            }
        });
    }

});
