/*
 * File: app/controller/viewListController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('webapp.controller.viewListController', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            ref: 'centerContainer',
            selector: '#centerContainer'
        },
        {
            ref: 'dashboardBtn',
            selector: '#dashboardBtn'
        },
        {
            ref: 'sessionDataBtn',
            selector: '#sessionDataBtn'
        },
        {
            ref: 'viewListBtn',
            selector: '#viewListBtn'
        },
        {
            ref: 'viewsPanel',
            selector: '#viewsPanel'
        },
        {
            ref: 'viewTreePanel',
            selector: '#viewTreePanel'
        },
        {
            ref: 'viewSaveBtn',
            selector: '#viewSaveBtn'
        },
        {
            ref: 'viewCreateBtn',
            selector: '#viewCreateBtn'
        },
        {
            ref: 'viewDeleteBtn',
            selector: '#viewDeleteBtn'
        }
    ],

    onViewListBtnClick: function(button, e, eOpts) {
        /**
         * Views 메뉴 버튼 클릭 시 수행되는 function
         */
        var centerContainer = this.getCenterContainer(),
            dashboardBtn = this.getDashboardBtn(),
            sessionDataBtn = this.getSessionDataBtn(),
            viewListBtn = this.getViewListBtn();

        // 현재 선택된 item이 viewsPanel일 경우 무시한다.
        if (centerContainer.layout.getActiveItem().itemId === "viewsPanel") {
            viewListBtn.toggle(true);
            return;
        }

        dashboardBtn.toggle(false);
        sessionDataBtn.toggle(false);
        centerContainer.layout.setActiveItem(2);

        var me = this;
        me.getDdocs();
    },

    onRefreshToolClick: function(tool, e, eOpts) {
        /**
         * Couchbase View List를 refresh 하기 위해 panel의 refresh tool을 활성화
         */
        var me = this;
        me.getDdocs();
    },

    onViewSaveBtnClick: function(button, e, eOpts) {
        var treePanel = Ext.getCmp('viewTreePanel'),
            viewsPanel = this.getViewsPanel();

        if (!treePanel.selModel.lastSelected) {
            Ext.Msg.alert('Message', 'Please select a view to edit.');
            return;
        }

        if (!treePanel.selModel.lastSelected.data.leaf) {
            Ext.Msg.alert('Message', 'This is not a view. Please select a view to edit.');
            return;
        }

        if (Ext.getCmp('mapTextArea').getValue() === '') {
            Ext.Msg.alert('Message', 'Map function can not be empty.<br/>Please insert a valid map function.');
            return;
        }

        var map = Ext.getCmp('mapTextArea').getValue(),
            reduce = Ext.getCmp('reduceTextArea').getValue();

        Ext.Msg.confirm('Confirm', 'Are you sure you want to save this view?', function(btn) {
            if (btn == 'yes') {
                viewsPanel.setLoading(true);

                var viewData = {};
                viewData.map = map;
                viewData.reduce = reduce;

                Ext.Ajax.request({
                    url: GlobalData.urlPrefix + 'ddocs/' + treePanel.selModel.lastSelected.data.id,
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    jsonData: viewData,
                    success: function(response, opts){
                        viewsPanel.setLoading(false);

                        if (response.responseText === 'true') {
                            treePanel.selModel.lastSelected.data.map = map;
                            treePanel.selModel.lastSelected.data.reduce = reduce;

                            Ext.Msg.alert('Message', 'View saved successfully.');
                        } else {
                            Ext.Msg.alert('Message', 'Failed to save view.');
                        }
                    },
                    failure: function(response, opts) {
                        viewsPanel.setLoading(false);
                        Ext.Msg.alert('Error', 'Server-side failure with status code ' + response.status);
                    }
                });
            }
        });
    },

    onViewCreateBtnClick: function(button, e, eOpts) {
        // Create view form window
        var create = Ext.create("widget.createViewWindow");

        // Show window
        create.show();

        Ext.getCmp("designDocumentName").focus();
    },

    onViewDeleteBtnClick: function(button, e, eOpts) {
        var treeView = Ext.getCmp('viewTreeView'),
            viewsPanel = this.getViewsPanel();

        var nodes = treeView.getSelectedNodes();

        if (nodes.length === 0) {
            Ext.Msg.alert('Message', 'Please select a view to delete.');
            return;
        }

        var record = treeView.getRecord(nodes[0]).data;
        /*
        Ext.Array.each(nodes, function(rec, idx) {
            names.push(treeView.getRecord(nodes[idx]).data.id);
        });
        */

        var msg = 'Are you sure you want to delete this view?';

        if (!record.map) {
            msg = 'Are you sure you want to delete this design document and sub view(s)?';
        }

        Ext.Msg.confirm('Confirm', msg, function(btn) {
            if (btn == 'yes') {
                viewsPanel.setLoading(true);

                Ext.Ajax.request({
                    url: GlobalData.urlPrefix + 'ddocs/' + record.id,
                    params: {
                    },
                    method: 'DELETE',
                    success: function(response, opts){
                        viewsPanel.setLoading(false);

                        if (response.responseText === 'true') {
                            Ext.Msg.alert('Message', 'View deleted successfully.');
                        } else {
                            Ext.Msg.alert('Message', 'Failed to delete view.');
                        }

                        Ext.getCmp('viewRefreshTool').fireEvent('click');
                    },
                    failure: function(response, opts) {
                        viewsPanel.setLoading(false);
                        Ext.Msg.alert('Error', 'Server-side failure with status code ' + response.status);
                    }
                });
            }
        });
    },

    onPopupCancelBtnClick: function(button, e, eOpts) {
        Ext.getCmp("createViewWindow").close();
    },

    onPopupSaveBtnClick: function(button, e, eOpts) {
        var viewWindow = Ext.getCmp("createViewWindow"),
            designDocumentName = Ext.getCmp("designDocumentName"),
            viewName = Ext.getCmp("viewName"),
            viewsPanel = this.getViewsPanel();

        if (designDocumentName.getValue() === '') {
            Ext.Msg.alert('Message', 'Design document name can not be empty.');
            designDocumentName.focus();
            return;
        }

        if (viewName.getValue() === '') {
            Ext.Msg.alert('Message', 'View name can not be empty.');
            viewName.focus();
            return;
        }

        viewsPanel.setLoading(true);

        Ext.Ajax.request({
            url: GlobalData.urlPrefix + 'ddocs/' + designDocumentName.getValue() + '/' + viewName.getValue(),
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            jsonData: '',
            success: function(response, opts){
                viewsPanel.setLoading(false);

                if (response.responseText === 'already exist') {
                    Ext.Msg.alert('Message', 'Failed to create view. [' + viewName.getValue() + '] is duplicated view name.');
                } else if (response.responseText === 'true') {
                    Ext.Msg.alert('Message', 'View created successfully.');
                } else {
                    Ext.Msg.alert('Message', 'Failed to create view.');
                }

                Ext.getCmp('viewRefreshTool').fireEvent('click');
            },
            failure: function(response, opts) {
                viewsPanel.setLoading(false);
                Ext.Msg.alert('Error', 'Server-side failure with status code ' + response.status);
            }
        });

        viewWindow.close();
    },

    getDdocs: function() {
        /**
         * Couchbase View 정보를 조회하는 function
         */
        var viewTreePanel = this.getViewTreePanel(),
            viewsPanel = this.getViewsPanel();

        viewsPanel.setLoading(true);

        Ext.Ajax.request({
            url: GlobalData.urlPrefix + 'ddocs',
            params: {
            },
            success: function(response, opts){
                viewsPanel.setLoading(false);

                var obj = Ext.decode(response.responseText);

                var root = Ext.decode("{expand: true, text: 'Views'}");

                var diff1 = 0, diff2 = 0;
                for (var i = 0; i < obj.length; i++) {
                    var doc = obj[i];

                    if (doc.designDocumentName === 'dolly' && doc.viewList.length === 1 && doc.viewList[0].viewName === 'getKeys') {
                        diff1 = 1;
                        continue;
                    }

                    if (!root.children) {
                        root.children = [];
                    }

                    root.children.push({});

                    root.children[i - diff1].text = '<b>' + doc.designDocumentName + '</b>';
                    root.children[i - diff1].id = doc.designDocumentName;
                    root.children[i - diff1].iconCls = 'no-icon';
                    root.children[i - diff1].cls = 'parent-node last-children';

                    if (doc.viewList.length > 0) {
                        root.children[i - diff1].expandable = false;
                        root.children[i - diff1].expanded = true;
                    } else {
                        root.children[i - diff1].leaf = true;
                    }

                    diff2 = 0;
                    for (var j = 0; j < doc.viewList.length; j++) {

                        if (doc.viewList[j].viewName === 'getKeys') {
                            diff2 = 1;
                            continue;
                        }

                        if (!root.children[i - diff1].children) {
                            root.children[i - diff1].children = [];
                        }

                        root.children[i - diff1].children.push({});

                        root.children[i - diff1].children[j - diff2].text = doc.viewList[j].viewName;
                        root.children[i - diff1].children[j - diff2].id = doc.designDocumentName + '/' + doc.viewList[j].viewName;
                        root.children[i - diff1].children[j - diff2].leaf = true;
                        root.children[i - diff1].children[j - diff2].iconCls = 'no-icon';
                        root.children[i - diff1].children[j - diff2].cls = 'view';
                        root.children[i - diff1].children[j - diff2].map = doc.viewList[j].map;
                        root.children[i - diff1].children[j - diff2].reduce = doc.viewList[j].reduce;
                    }
                }

                var store = Ext.data.StoreManager.lookup('viewTreeStore'),
                    store1 = Ext.data.StoreManager.lookup('viewTreeStore1');

                store.setRootNode(root);
                store1.setRootNode(root);

                viewTreePanel.update();
                Ext.getCmp("viewTreePanel1").update();

                Ext.getCmp('mapPanel').setTitle('Map');
                Ext.getCmp('reducePanel').setTitle('Reduce');
                Ext.getCmp('mapTextArea').setValue('');
                Ext.getCmp('reduceTextArea').setValue('');

                if (obj.length > 0) {
                    Ext.getCmp("emptyViewPanel").hide();
                } else {
                    Ext.getCmp("emptyViewPanel").show();
                }
            },
            failure: function(response, opts) {
                viewsPanel.setLoading(false);
                var root = Ext.decode("{expand: true, text: 'Views'}");
                var store = Ext.data.StoreManager.lookup('viewTreeStore');
                store.setRootNode(root);
                viewTreePanel.update();
                Ext.getCmp("viewTreePanel1").update();

                Ext.getCmp('mapPanel').setTitle('Map');
                Ext.getCmp('reducePanel').setTitle('Reduce');
                Ext.getCmp('mapTextArea').setValue('');
                Ext.getCmp('reduceTextArea').setValue('');
            }
        });

    },

    init: function(application) {
        this.control({
            "#viewListBtn": {
                click: this.onViewListBtnClick
            },
            "#viewRefreshTool": {
                click: this.onRefreshToolClick
            },
            "#viewSaveBtn": {
                click: this.onViewSaveBtnClick
            },
            "#viewCreateBtn": {
                click: this.onViewCreateBtnClick
            },
            "#viewDeleteBtn": {
                click: this.onViewDeleteBtnClick
            },
            "#viewPopupCancelBtn": {
                click: this.onPopupCancelBtnClick
            },
            "#viewPopupSaveBtn": {
                click: this.onPopupSaveBtnClick
            }
        });
    }

});
