{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "dashboardController"
    },
    "designerId": "ad74de95-6c32-44a5-a1bd-5ca0403e3c04",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#dashboardBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "click",
                "implHandler": [
                    "/**",
                    " * Dashboard 메뉴 버튼 클릭 시 수행되는 function",
                    " */",
                    "var centerContainer = this.getCenterContainer(),",
                    "    dashboardBtn = this.getDashboardBtn(),",
                    "    sessionDataBtn = this.getSessionDataBtn();",
                    "",
                    "// 현재 선택된 item이 dashboardPanel일 경우 무시한다.",
                    "if (centerContainer.layout.getActiveItem().itemId === \"dashboardPanel\") {",
                    "    dashboardBtn.toggle(true);",
                    "    return;",
                    "}",
                    "",
                    "sessionDataBtn.toggle(false);",
                    "centerContainer.layout.setActiveItem(0);",
                    "",
                    "var me = this;",
                    "me.getStat();",
                    "",
                    "// monitor()는 onLanch()에서 실행",
                    "//me.monitor();"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "d6fbd05d-c662-4dcc-958e-0e18264247bd"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "centerContainer",
                "selector": "#centerContainer"
            },
            "designerId": "8348af79-361e-4ca5-8b51-6dba75b95ab6"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "dashboardBtn",
                "selector": "#dashboardBtn"
            },
            "designerId": "22d1c0aa-bee2-46fa-a2da-c9732e2c5676"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "sessionDataBtn",
                "selector": "#sessionDataBtn"
            },
            "designerId": "2d7ba58c-6a65-4727-91bb-24c39c19d9d1"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "monitoringPanel",
                "selector": "#monitoringPanel"
            },
            "designerId": "3004122d-b4c7-4550-8502-9cb44172a894"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "statPanel",
                "selector": "#statPanel"
            },
            "designerId": "efaeb4c5-ef8f-4be4-a399-323e23ba9ea1"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onLaunch",
                "implHandler": [
                    "/**",
                    " * Dashboard Panel이 활성화(초기 로딩) 될 경우 모니터링 정보와 통계 정보를 조회한다.",
                    " */",
                    "this.monitor();",
                    "this.getStat();"
                ]
            },
            "designerId": "24a37b8f-02f2-4b2e-8e84-f0a1b4be28d8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getStat",
                "implHandler": [
                    "/**",
                    " * 통계 정보를 조회하는 function",
                    " */",
                    "var statPanel = this.getStatPanel();",
                    "",
                    "statPanel.setLoading(true);",
                    "",
                    "Ext.Ajax.request({",
                    "    url: GlobalData.urlPrefix + 'getStat',",
                    "    params: {",
                    "    },",
                    "    success: function(response, opts){",
                    "        statPanel.setLoading(false);",
                    "",
                    "        var obj = Ext.decode(response.responseText);",
                    "",
                    "        Ext.getCmp('totalField').update(\"Totally \" + obj.size + \" Session Data Saved in Cache\");",
                    "        Ext.getCmp('statField1').setValue(toDigit(obj.timeSinceStart));",
                    "        Ext.getCmp('statField2').setValue(toDigit(obj.totalNumberOfEntries));",
                    "        Ext.getCmp('statField3').setValue(toDigit(obj.currentNumberOfEntries));",
                    "        Ext.getCmp('statField4').setValue(toDigit(obj.stores));",
                    "        Ext.getCmp('statField5').setValue(toDigit(obj.retrievals));",
                    "        Ext.getCmp('statField6').setValue(toDigit(obj.hits));",
                    "        Ext.getCmp('statField7').setValue(toDigit(obj.misses));",
                    "        Ext.getCmp('statField8').setValue(toDigit(obj.removeHits));",
                    "        Ext.getCmp('statField9').setValue(toDigit(obj.removeMisses));",
                    "    },",
                    "    failure: function(response, opts) {",
                    "        statPanel.setLoading(false);",
                    "        Ext.getCmp('totalField').update(\"Totally -1 Session Data Saved in Cache\");",
                    "        Ext.getCmp('statField1').setValue(\"-1\");",
                    "        Ext.getCmp('statField2').setValue(\"-1\");",
                    "        Ext.getCmp('statField3').setValue(\"-1\");",
                    "        Ext.getCmp('statField4').setValue(\"-1\");",
                    "        Ext.getCmp('statField5').setValue(\"-1\");",
                    "        Ext.getCmp('statField6').setValue(\"-1\");",
                    "        Ext.getCmp('statField7').setValue(\"-1\");",
                    "        Ext.getCmp('statField8').setValue(\"-1\");",
                    "        Ext.getCmp('statField9').setValue(\"-1\");",
                    "        Ext.Msg.alert('Error', 'Server-side failure with status code ' + response.status);",
                    "    }",
                    "});",
                    "",
                    "// 1,000 단위마다 ','(comma)를 표시하기 위한 function",
                    "var toDigit = function(val) {",
                    "    while (/(\\d+)(\\d{3})/.test(val.toString())){",
                    "      val = val.toString().replace(/(\\d+)(\\d{3})/, '$1'+','+'$2');",
                    "    }",
                    "    return val;",
                    "};"
                ]
            },
            "designerId": "d5044541-b1cb-45bd-8e96-37353e81393d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "monitor",
                "implHandler": [
                    "/**",
                    " * 모니터링 정보를 조회하고 Chart에 적용한다.",
                    " */",
                    "var currentDate = new Date();",
                    "",
                    "// milli second 값을 지운다.",
                    "currentDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDay(), currentDate.getHours(), currentDate.getMinutes(), currentDate.getSeconds());",
                    "",
                    "// chart에 표시될 x축 개수",
                    "var length = 20;",
                    "",
                    "// x축의 시간 차(초)",
                    "// length가 20이고 step이 3일 경우 1분간의 데이터가 3초 단위로 20번 표시된다.",
                    "// length가 30이고 step이 2일 경우 1분간의 데이터가 2초 단위로 30번 표시된다.",
                    "var step = 3;",
                    "",
                    "// Memory, CPU Chart를 위한 변수 설정",
                    "var memoryChart;",
                    "var cpuChart;",
                    "",
                    "var memoryData = [];",
                    "var cpuData = [];",
                    "",
                    "var memoryStore = GlobalData.memoryStore;",
                    "var cpuStore = GlobalData.cpuStore;",
                    "",
                    "// Memory Chart 생성 후 memoryPanel에 draw 한다.",
                    "Ext.create('Ext.panel.Panel', {",
                    "    renderTo: \"memoryPanel-body\",",
                    "    width: 500,",
                    "    height: 405,",
                    "    layout: 'fit',",
                    "    items: [{",
                    "        xtype: 'chart',",
                    "        style: 'background:#fff',",
                    "        id: 'memoryChart',",
                    "        store: memoryStore,",
                    "        shadow: false,",
                    "        animate: true,",
                    "        margins: '15 0 0 0',",
                    "        legend: {",
                    "            visible: false,",
                    "            position: 'bottom'",
                    "        },",
                    "        axes: [{",
                    "            type: 'Numeric',",
                    "            //minimum: 0,",
                    "            //maximum: 100,",
                    "            position: 'left',",
                    "            title: 'Memory(Heap) Usage(MB)',",
                    "            grid: {",
                    "                odd: {",
                    "                    fill: '#dedede',",
                    "                    stroke: '#ddd',",
                    "                    'stroke-width': 0.5",
                    "                }",
                    "            }",
                    "        }, {",
                    "            type: 'Time',",
                    "            position: 'bottom',",
                    "            fields: 'date',",
                    "            dateFormat: 'H:i:s',",
                    "            constrain: true,",
                    "            fromDate: Ext.Date.add(currentDate, Ext.Date.SECOND, 0),",
                    "            toDate: Ext.Date.add(currentDate, Ext.Date.SECOND, (length * step)),",
                    "            grid: true,",
                    "            step: [",
                    "                's',",
                    "                step",
                    "            ],",
                    "            label: {",
                    "                rotate: {",
                    "                    degrees: 315",
                    "                }",
                    "            }",
                    "        }],",
                    "        series: [{",
                    "            type: 'line',",
                    "            smooth: false,",
                    "            axis: ['left', 'bottom'],",
                    "            xField: 'date',",
                    "            yField: 'field1',",
                    "            title: 'node-01',",
                    "            markerConfig: {",
                    "                radius: 3,",
                    "                size: 3",
                    "            }",
                    "        },{",
                    "            type: 'line',",
                    "            axis: ['left', 'bottom'],",
                    "            smooth: false,",
                    "            xField: 'date',",
                    "            yField: 'field2',",
                    "            title: 'node-02',",
                    "            markerConfig: {",
                    "                radius: 3,",
                    "                size: 3",
                    "            }",
                    "        },{",
                    "            type: 'line',",
                    "            axis: ['left', 'bottom'],",
                    "            smooth: false,",
                    "            xField: 'date',",
                    "            yField: 'field3',",
                    "            title: 'node-03',",
                    "            markerConfig: {",
                    "                radius: 3,",
                    "                size: 3",
                    "            }",
                    "        },{",
                    "            type: 'line',",
                    "            axis: ['left', 'bottom'],",
                    "            smooth: false,",
                    "            xField: 'date',",
                    "            yField: 'field4',",
                    "            title: 'node-04',",
                    "            markerConfig: {",
                    "                radius: 3,",
                    "                size: 3",
                    "            }",
                    "        },{",
                    "            type: 'line',",
                    "            axis: ['left', 'bottom'],",
                    "            smooth: false,",
                    "            xField: 'date',",
                    "            yField: 'field5',",
                    "            title: 'node-05',",
                    "            markerConfig: {",
                    "                radius: 3,",
                    "                size: 3",
                    "            }",
                    "        },{",
                    "            type: 'line',",
                    "            axis: ['left', 'bottom'],",
                    "            smooth: false,",
                    "            xField: 'date',",
                    "            yField: 'field6',",
                    "            title: 'node-06',",
                    "            markerConfig: {",
                    "                radius: 3,",
                    "                size: 3",
                    "            }",
                    "        },{",
                    "            type: 'line',",
                    "            axis: ['left', 'bottom'],",
                    "            smooth: false,",
                    "            xField: 'date',",
                    "            yField: 'field7',",
                    "            title: 'node-07',",
                    "            markerConfig: {",
                    "                radius: 3,",
                    "                size: 3",
                    "            }",
                    "        },{",
                    "            type: 'line',",
                    "            axis: ['left', 'bottom'],",
                    "            smooth: false,",
                    "            xField: 'date',",
                    "            yField: 'field8',",
                    "            title: 'node-08',",
                    "            markerConfig: {",
                    "                radius: 3,",
                    "                size: 3",
                    "            }",
                    "        }]",
                    "    }]",
                    "});",
                    "",
                    "",
                    "// CPU Chart 생성 후 cpuPanel에 draw 한다.",
                    "Ext.create('Ext.panel.Panel', {",
                    "    renderTo: \"cpuPanel-body\",",
                    "    width: 500,",
                    "    height: 405,",
                    "    layout: 'fit',",
                    "    items: [{",
                    "        xtype: 'chart',",
                    "        style: 'background:#fff',",
                    "        id: 'cpuChart',",
                    "        store: cpuStore,",
                    "        shadow: false,",
                    "        animate: true,",
                    "        margins: '15 0 0 0',",
                    "        legend: {",
                    "            visible: false,",
                    "            position: 'bottom'",
                    "        },",
                    "        axes: [{",
                    "            type: 'Numeric',",
                    "            //minimum: 0,",
                    "            //maximum: 100,",
                    "            position: 'left',",
                    "            title: 'CPU Usage(%)',",
                    "            grid: {",
                    "                odd: {",
                    "                    fill: '#dedede',",
                    "                    stroke: '#ddd',",
                    "                    'stroke-width': 0.5",
                    "                }",
                    "            }",
                    "        }, {",
                    "            type: 'Time',",
                    "            position: 'bottom',",
                    "            fields: 'date',",
                    "            dateFormat: 'H:i:s',",
                    "            constrain: true,",
                    "            fromDate: Ext.Date.add(currentDate, Ext.Date.SECOND, 0),",
                    "            toDate: Ext.Date.add(currentDate, Ext.Date.SECOND, (length * step)),",
                    "            grid: true,",
                    "            step: [",
                    "                's',",
                    "                step",
                    "            ],",
                    "            label: {",
                    "                rotate: {",
                    "                    degrees: 315",
                    "                }",
                    "            }",
                    "        }],",
                    "        series: [{",
                    "            type: 'line',",
                    "            smooth: false,",
                    "            axis: ['left', 'bottom'],",
                    "            xField: 'date',",
                    "            yField: 'field1',",
                    "            title: 'node-01',",
                    "            markerConfig: {",
                    "                radius: 3,",
                    "                size: 3",
                    "            }",
                    "        },{",
                    "            type: 'line',",
                    "            axis: ['left', 'bottom'],",
                    "            smooth: false,",
                    "            xField: 'date',",
                    "            yField: 'field2',",
                    "            title: 'node-02',",
                    "            markerConfig: {",
                    "                radius: 3,",
                    "                size: 3",
                    "            }",
                    "        },{",
                    "            type: 'line',",
                    "            axis: ['left', 'bottom'],",
                    "            smooth: false,",
                    "            xField: 'date',",
                    "            yField: 'field3',",
                    "            title: 'node-03',",
                    "            markerConfig: {",
                    "                radius: 3,",
                    "                size: 3",
                    "            }",
                    "        },{",
                    "            type: 'line',",
                    "            axis: ['left', 'bottom'],",
                    "            smooth: false,",
                    "            xField: 'date',",
                    "            yField: 'field4',",
                    "            title: 'node-04',",
                    "            markerConfig: {",
                    "                radius: 3,",
                    "                size: 3",
                    "            }",
                    "        },{",
                    "            type: 'line',",
                    "            axis: ['left', 'bottom'],",
                    "            smooth: false,",
                    "            xField: 'date',",
                    "            yField: 'field5',",
                    "            title: 'node-05',",
                    "            markerConfig: {",
                    "                radius: 3,",
                    "                size: 3",
                    "            }",
                    "        },{",
                    "            type: 'line',",
                    "            axis: ['left', 'bottom'],",
                    "            smooth: false,",
                    "            xField: 'date',",
                    "            yField: 'field6',",
                    "            title: 'node-06',",
                    "            markerConfig: {",
                    "                radius: 3,",
                    "                size: 3",
                    "            }",
                    "        },{",
                    "            type: 'line',",
                    "            axis: ['left', 'bottom'],",
                    "            smooth: false,",
                    "            xField: 'date',",
                    "            yField: 'field7',",
                    "            title: 'node-07',",
                    "            markerConfig: {",
                    "                radius: 3,",
                    "                size: 3",
                    "            }",
                    "        },{",
                    "            type: 'line',",
                    "            axis: ['left', 'bottom'],",
                    "            smooth: false,",
                    "            xField: 'date',",
                    "            yField: 'field8',",
                    "            title: 'node-08',",
                    "            markerConfig: {",
                    "                radius: 3,",
                    "                size: 3",
                    "            }",
                    "        }]",
                    "    }]",
                    "});",
                    "",
                    "memoryChart = Ext.getCmp('memoryChart');",
                    "var timeAxis1 = memoryChart.axes.get(1);",
                    "",
                    "cpuChart = Ext.getCmp('cpuChart');",
                    "var timeAxis2 = cpuChart.axes.get(1);",
                    "",
                    "// 초기 8개로 구성된 series를 serverSize 갯수로 줄인다.",
                    "memoryChart.series.items.splice(GlobalData.serverSize, memoryChart.series.items.length - GlobalData.serverSize);",
                    "cpuChart.series.items.splice(GlobalData.serverSize, cpuChart.series.items.length - GlobalData.serverSize);",
                    "",
                    "// Real-Time Chart를 위해 주기적으로 상태정보 조회 호출하도록 설정한다.",
                    "setInterval(function() {",
                    "     loadMemoryStat();",
                    "     loadCpuStat();",
                    "}, step * 1000);",
                    "",
                    "// Memory 상태 정보를 조회하기 위한 function",
                    "loadMemoryStat = function() {",
                    "    var last = false, date = new Date();",
                    "    memoryData = memoryData.slice();",
                    "",
                    "    var result;",
                    "    Ext.Ajax.request({",
                    "        url: GlobalData.urlPrefix + 'memories',",
                    "        params: {",
                    "        },",
                    "        success: function(response, opts){",
                    "            result = Ext.decode(response.responseText);",
                    "",
                    "            var newData1 = {date: new Date(date.getFullYear(), date.getMonth(), date.getDay(), date.getHours(), date.getMinutes(), date.getSeconds())};",
                    "",
                    "            if (GlobalData.serverSize > 0) {",
                    "                newData1.field1 = result[0].used / (1024 * 1024);",
                    "            }",
                    "            if (GlobalData.serverSize > 1) {",
                    "                newData1.field2 = result[1].used / (1024 * 1024);",
                    "            }",
                    "            if (GlobalData.serverSize > 2) {",
                    "                newData1.field3 = result[2].used / (1024 * 1024);",
                    "            }",
                    "            if (GlobalData.serverSize > 3) {",
                    "                newData1.field4 = result[3].used / (1024 * 1024);",
                    "            }",
                    "            if (GlobalData.serverSize > 4) {",
                    "                newData1.field5 = result[4].used / (1024 * 1024);",
                    "            }",
                    "            if (GlobalData.serverSize > 5) {",
                    "                newData1.field6 = result[5].used / (1024 * 1024);",
                    "            }",
                    "            if (GlobalData.serverSize > 6) {",
                    "                newData1.field7 = result[6].used / (1024 * 1024);",
                    "            }",
                    "            if (GlobalData.serverSize > 7) {",
                    "                newData1.field8 = result[7].used / (1024 * 1024);",
                    "            }",
                    "",
                    "            // 조회 결과 데이터를 memoryData 배열에 추가하고 데이터가 필요 이상으로 누적되지 않도록 과거 데이터를 배열에서 삭제한다.",
                    "            memoryData.push(newData1);",
                    "",
                    "            last = memoryData[memoryData.length -1];",
                    "",
                    "            if (memoryData.length > length + 1) {",
                    "                memoryData.splice(0, 1);",
                    "            }",
                    "",
                    "            var toDate = timeAxis1.toDate,",
                    "                lastDate = memoryData[memoryData.length - 1].date;",
                    "",
                    "            // 초기 Chart에 범주가 표시되지 않을 경우 범주를 표시한다.",
                    "            if (memoryChart.legend.visible === false) {",
                    "                memoryChart.legend.visible = true;",
                    "            }",
                    "",
                    "            // Chart의 fromDate, toDate 값을 현재 시점에 맞도록 변경한다.",
                    "            if (+toDate < +lastDate) {",
                    "                timeAxis1.fromDate = memoryData[0].date;",
                    "                timeAxis1.toDate = memoryData[memoryData.length -1].date;",
                    "                memoryChart.markerIndex = 1;",
                    "            } else {",
                    "                timeAxis1.fromDate = memoryData[0].date;",
                    "                timeAxis1.toDate = Ext.Date.add(memoryData[0].date, Ext.Date.SECOND, (length * step));",
                    "            }",
                    "",
                    "            // Chart를 주어진 데이터로 reloading 한다.",
                    "            memoryStore.loadData(memoryData);",
                    "        },",
                    "        failure: function(response, opts) {",
                    "            Ext.Msg.alert('Error', 'Server-side failure with status code ' + response.status);",
                    "",
                    "            memoryData.push({",
                    "                date: new Date(date.getFullYear(), date.getMonth(), date.getDay(), date.getHours(), date.getMinutes(), date.getSeconds()),",
                    "                field1: 0,",
                    "                field2: 0,",
                    "                field3: 0,",
                    "                field4: 0,",
                    "                field5: 0,",
                    "                field6: 0,",
                    "                field7: 0,",
                    "                field8: 0",
                    "            });",
                    "",
                    "            last = memoryData[memoryData.length -1];",
                    "",
                    "            if (memoryData.length > length + 1) {",
                    "                memoryData.splice(0, 1);",
                    "            }",
                    "",
                    "            var toDate = timeAxis1.toDate,",
                    "                lastDate = memoryData[memoryData.length - 1].date;",
                    "",
                    "            if (+toDate < +lastDate) {",
                    "                timeAxis1.fromDate = memoryData[0].date;",
                    "                timeAxis1.toDate = memoryData[memoryData.length -1].date;",
                    "                memoryChart.markerIndex = 1;",
                    "            } else {",
                    "                timeAxis1.fromDate = memoryData[0].date;",
                    "                timeAxis1.toDate = Ext.Date.add(memoryData[0].date, Ext.Date.SECOND, (length * step));",
                    "            }",
                    "",
                    "            memoryStore.loadData(memoryData);",
                    "        }",
                    "    });",
                    "};",
                    "",
                    "// CPU 상태 정보를 조회하기 위한 function",
                    "loadCpuStat = function() {",
                    "    var last = false, date = new Date();",
                    "    cpuData = cpuData.slice();",
                    "",
                    "    var result;",
                    "    Ext.Ajax.request({",
                    "        url: GlobalData.urlPrefix + 'cpus',",
                    "        params: {",
                    "        },",
                    "        success: function(response, opts){",
                    "            result = Ext.decode(response.responseText);",
                    "",
                    "            var newData2 = {date: new Date(date.getFullYear(), date.getMonth(), date.getDay(), date.getHours(), date.getMinutes(), date.getSeconds())};",
                    "",
                    "            if (GlobalData.serverSize > 0) {",
                    "                newData2.field1 = +result[0];",
                    "            }",
                    "            if (GlobalData.serverSize > 1) {",
                    "                newData2.field2 = +result[1];",
                    "            }",
                    "            if (GlobalData.serverSize > 2) {",
                    "                newData2.field3 = +result[2];",
                    "            }",
                    "            if (GlobalData.serverSize > 3) {",
                    "                newData2.field4 = +result[3];",
                    "            }",
                    "            if (GlobalData.serverSize > 4) {",
                    "                newData2.field5 = +result[4];",
                    "            }",
                    "            if (GlobalData.serverSize > 5) {",
                    "                newData2.field6 = +result[5];",
                    "            }",
                    "            if (GlobalData.serverSize > 6) {",
                    "                newData2.field7 = +result[6];",
                    "            }",
                    "            if (GlobalData.serverSize > 7) {",
                    "                newData2.field8 = +result[7];",
                    "            }",
                    "",
                    "            // 조회 결과 데이터를 cpuData 배열에 추가하고 데이터가 필요 이상으로 누적되지 않도록 과거 데이터를 배열에서 삭제한다.",
                    "            cpuData.push(newData2);",
                    "",
                    "            last = cpuData[cpuData.length -1];",
                    "",
                    "            if (cpuData.length > length + 1) {",
                    "                cpuData.splice(0, 1);",
                    "            }",
                    "",
                    "            var toDate = timeAxis2.toDate,",
                    "                lastDate = cpuData[cpuData.length - 1].date;",
                    "",
                    "            // 초기 Chart에 범주가 표시되지 않을 경우 범주를 표시한다.",
                    "            if (cpuChart.legend.visible === false) {",
                    "                cpuChart.legend.visible = true;",
                    "            }",
                    "",
                    "            // Chart의 fromDate, toDate 값을 현재 시점에 맞도록 변경한다.",
                    "            if (+toDate < +lastDate) {",
                    "                timeAxis2.fromDate = cpuData[0].date;",
                    "                timeAxis2.toDate = cpuData[cpuData.length -1].date;",
                    "                cpuChart.markerIndex = 1;",
                    "            } else {",
                    "                timeAxis2.fromDate = cpuData[0].date;",
                    "                timeAxis2.toDate = Ext.Date.add(cpuData[0].date, Ext.Date.SECOND, (length * step));",
                    "            }",
                    "",
                    "            // Chart를 주어진 데이터로 reloading 한다.",
                    "            cpuStore.loadData(cpuData);",
                    "        },",
                    "        failure: function(response, opts) {",
                    "            Ext.Msg.alert('Error', 'Server-side failure with status code ' + response.status);",
                    "",
                    "            cpuData.push({",
                    "                date: new Date(date.getFullYear(), date.getMonth(), date.getDay(), date.getHours(), date.getMinutes(), date.getSeconds()),",
                    "                field1: 0,",
                    "                field2: 0,",
                    "                field3: 0,",
                    "                field4: 0,",
                    "                field5: 0,",
                    "                field6: 0,",
                    "                field7: 0,",
                    "                field8: 0",
                    "            });",
                    "",
                    "            last = cpuData[cpuData.length -1];",
                    "",
                    "            if (cpuData.length > length + 1) {",
                    "                cpuData.splice(0, 1);",
                    "            }",
                    "",
                    "            var toDate = timeAxis2.toDate,",
                    "                lastDate = cpuData[cpuData.length - 1].date;",
                    "",
                    "            if (+toDate < +lastDate) {",
                    "                timeAxis2.fromDate = cpuData[0].date;",
                    "                timeAxis2.toDate = cpuData[cpuData.length -1].date;",
                    "                memoryChart.markerIndex = 1;",
                    "            } else {",
                    "                timeAxis2.fromDate = cpuData[0].date;",
                    "                timeAxis2.toDate = Ext.Date.add(cpuData[0].date, Ext.Date.SECOND, (length * step));",
                    "            }",
                    "",
                    "            cpuStore.loadData(cpuData);",
                    "        }",
                    "    });",
                    "};"
                ]
            },
            "designerId": "d84bafef-5993-4c5f-a38d-f5f262802908"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#statRefreshTool",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onToolClick",
                "implHandler": [
                    "/**",
                    " * 통계 정보를 refresh 하기 위해 panel의 refresh tool을 활성화",
                    " */",
                    "var me = this;",
                    "me.getStat();"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "89a28ded-3fda-4e1e-b7c1-ca7f1b011c39"
        }
    ]
}